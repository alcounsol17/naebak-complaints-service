# GitHub Actions للنشر التلقائي - خدمة الشكاوى نائبك.كوم
name: Deploy Complaints Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: naebak-platform
  SERVICE_NAME: naebak-complaints-service
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
    
    - name: Run migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py migrate
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        coverage run --source='.' manage.py test
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r . -x /tests/
        safety check

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black
      run: black --check .
    
    - name: Run isort
      run: isort --check-only .
    
    - name: Run flake8
      run: flake8 .

  build-and-deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=False" \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="REDIS_URL=${{ secrets.REDIS_URL }}" \
          --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --set-env-vars="ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" \
          --set-env-vars="CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 1 \
          --max-instances 10 \
          --timeout 300 \
          --concurrency 80
    
    - name: Run database migrations
      run: |
        gcloud run jobs create migrate-$SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --command="python,manage.py,migrate" \
          --memory 512Mi \
          --cpu 1 \
          --max-retries 3 \
          --parallelism 1 \
          --task-count 1 || true
        
        gcloud run jobs execute migrate-$SERVICE_NAME --region $REGION --wait
    
    - name: Collect static files
      run: |
        gcloud run jobs create collectstatic-$SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --command="python,manage.py,collectstatic,--noinput" \
          --memory 512Mi \
          --cpu 1 \
          --max-retries 3 \
          --parallelism 1 \
          --task-count 1 || true
        
        gcloud run jobs execute collectstatic-$SERVICE_NAME --region $REGION --wait
    
    - name: Update traffic to new revision
      run: |
        gcloud run services update-traffic $SERVICE_NAME \
          --to-latest \
          --region $REGION
    
    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        curl -f $SERVICE_URL/health/ || exit 1
        echo "Deployment successful! Service URL: $SERVICE_URL"

  deploy-staging:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Deploy to staging
      run: |
        gcloud run deploy $SERVICE_NAME-staging \
          --source . \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=True" \
          --set-env-vars="DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" \
          --set-env-vars="REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" \
          --set-env-vars="SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}" \
          --memory 512Mi \
          --cpu 0.5 \
          --min-instances 0 \
          --max-instances 5

  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()
